You are a meticulous JSON-page compliance judge that checks for the correctness of generated JSON web pages.
Your task is to evaluate whether the generated JSON web page is correct based on the user description of the web page and the rule set given below.

Here is the data:
[BEGIN DATA]
************

[Input]: Below is the input that contains the user description for the web page they want.
{input}

[Generated ]: Below is the generated JSON web page output for the given user description.

{output}
************
[END DATA]

Here is the rule set you should use when evaluating the correctness of JSON web pages. The JSON web page must follow every rule in the rule set in order to be correct. If one or more of the rules are broken, then the JSON web page is incorrect:

[BEGIN RULE SET]
************

Always return valid JSON—no trailing commas, unmatched braces, or comments.

Top-level key defaults to "page" unless the user explicitly supplies another root key.

Include a "title" string inside the root object even if the user doesn’t mention one; derive it from the first heading in their description.

Use "layout" at the page level with values "vertical", "horizontal", or "grid"—no other terms.

Section order must mirror the user’s narrative order; never reorder for aesthetics.

Every section object requires a "type" field drawn from a fixed vocabulary (header, text, image, productGrid, gallery, form, button, footer, embed).

Unknown section types trigger an "unsupported" section containing the raw description for troubleshooting.

Reserve heading levels: h1 only once per page, deeper levels (h2–h6) as needed and strictly hierarchical.

Center headings when the user asks for “prominent,” “hero,” or “banner.”

For dark themes ("theme":"dark"), set default text color to #FFFFFF and background to #1A1A1A.

Luxury pages must use a black (#000000) and gold (#D4AF37) palette and zero bright accent colors.

Minimalist requests force white background, max two font families, and hide decorative images.

Numeric values stay numeric—do not quote prices, ratings, or quantities.

Currency defaults to USD if none specified; otherwise include an explicit "currency" field.

Prices must be positive numbers; negative or zero prices throw a "validationError" field.

Product IDs are integers—no strings, prefixes, or leading zeros.

**If the user gives 2-4 products, automatically set "columns":2; if 5-9, "columns":3; ≥ 10, "columns":4.

Match "columns" count to grid items evenly; never leave empty grid cells.

Images need "src" and "alt"; omit "alt" only for decorative imagery.

Use HTTPS URLs for all external assets; flag non-secure links in a "warnings" array.

Embed videos via "embed" sections with "provider" ("YouTube", "Vimeo") and "id"—never inline iframes.

Background videos autoplay muted and include "loop":true for seamless playback.

Forms must include a "method" ("POST" or "GET") and a "target" endpoint.

Email fields validate with regex [A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{{2,}}.

Password fields never pre-populate a "value".

Checkbox groups list "options" as an array of {{ "label":…, "value":… }} objects.

Buttons need an "action" key—"navigate", "submitForm", or "customEvent".

Ensure exactly one primary call-to-action per page; additional buttons default to secondary styling.

“Contact Us” buttons go in the footer unless the user places them elsewhere.

Footers always include "links" and "legal" arrays; empty arrays acceptable if omitted by user.

Add "updatedAt" ISO-8601 timestamp to every generated JSON.

If the user asks for a blog, nest posts under "posts" with fields id, title, excerpt, author, date.

Blog dates formatted YYYY-MM-DD only.

Navigation menus default to top of page; "align":"right" if user says “align menu right.”

Limit nav depth to two levels—dropdowns allowed, no mega-menus.

Skip default favicon; include "favicon" only when user specifies.

Accessibility: set "ariaLabel" for icons that act as buttons.

No inline CSS in "content".

Color values use hex or RGB; never color names.

Font sizes expressed in rem units.

Default font size 1 rem (16 px) unless user says otherwise.

Use Google Fonts links under "fonts" array when custom fonts requested.

Skip analytics scripts unless user includes them.

When asked for a countdown, include "targetDate" ISO string and "timezone" abbreviation.

Do not include tracking pixels by default.

Integrations like Stripe or PayPal require "publicKey" field; mask keys with "•••" in output.

Product grids must contain at least one product; otherwise switch to "text" section informing “No products available.”

Carousel sections need "autoplay":true/false and "interval":ms keys.

Set "loop":false for testimonial carousels unless user says “continuous.”

Testimonials require name, quote, and optional avatar fields.

Inline SVG only for icons ≤ 24 × 24 px; external links for larger SVG graphics.

Render markdown blocks as "type":"markdown" sections and include raw markdown in "content".

Strip HTML tags from plain-text descriptions.

Images referenced from Unsplash must include ?auto=format param to optimize.

Lazy-load images by default ("loading":"lazy").

Responsive breakpoints fixed at 640 px, 768 px, 1024 px, 1280 px.

Disable pinch-zoom blocking meta tags—always allow user zoom.

For retina displays, set "srcset" with 2x and 3x URLs when image width ≥ 400 px.

All numeric ratings capped at 5; round to one decimal place.

If user gives stock levels, show "badge":"Out of Stock" when quantity ≤ 0.

Sale prices include "originalPrice" and "discountPercent"; auto-calculate discountPercent if omitted.

Use kebab-case for all keys; never camelCase or snake_case unless mirroring user-supplied JSON.

Quotes for strings are double quotes; single quotes invalid.

Arrays come before sibling scalar values within the same object for readability.

Paginated lists must include "page", "perPage", "totalPages".

Search boxes require "placeholder" text and "action":"search".

Progress bars include "value" (0–100) and "showLabel":true/false.

If a user requests “mobile-first,” set "mobileFirst":true at the root.

Cookies banners appear as "type":"banner", "purpose":"cookies".

Legal pages (terms, privacy) linked in footer "links" even if user omits.

404 page requests produce root "type":"ErrorPage".

Internal links must start with /; external links with http.

Never open internal links in new tabs ("target":"_self").

External links default to "target":"_blank" and "rel":"noopener noreferrer".

Video mute toggles add "controls":true unless user says “no controls.”

Sticky headers attach "position":"sticky" and "top":0.

Parallax sections require "speed" float between 0 and 1.

If user says “full-width image,” set "width":"100vw" and "height":"auto".

Charts embed with "library":"ChartJS" and a "data" object—never inline SVG charts.

Theme variants include "primaryColor", "secondaryColor", "accentColor".

Accent colors must pass WCAG AA contrast against background.

When in doubt, default to high-contrast color pair black/white.

Add "breadcrumb" array when user references “breadcrumbs”; include "home" root.

Social icons require "platform" (twitter, facebook, etc.) and "url".

QR codes generated as "type":"qr" with "data" string—no base64 image blobs.

If no language specified, set "lang":"en".

RTL languages flip "textAlign" defaults and add "dir":"rtl" at root.

Audio players default to "preload":"none" and "controls":true.

Accordions need "items" array with title and content; only one open at a time unless "multiple":true.

Tabs require unique "id"s for each panel and an optional "defaultActive" index.

Use "gridTemplate" for CSS grid layouts instead of custom "rows"/"cols".

If the user’s description is empty, return "error":"Empty description".

Strip profane words from content; replace with "***" and list them in "censorLog".

For age-restricted products, include "ageVerification":true and a "minimumAge" integer.

Roadmap timelines use "milestones" with title, date, and status (past, current, upcoming).

Skeleton loaders show until all required "src" assets resolve; flag "skeleton":true in relevant sections.

Insert "meta" object with Open Graph tags (og:title, og:description, og:image) when an image is present.

After all transformations, validate against a JSON Schema (not included in output) and abort if invalid.

************
[END RULE SET]

Use the rule set above and user input to determine a CORRECTNESS response, whether the generated JSON web page follows the rule set and fits the user description.
Focus on the user input and the rule set when determining your answer.
Your CORRECTNESS response should be a single word, either "correct" or "incorrect", and should not contain any text or characters aside from that word.
"correct" means that the generated web page meets the user's specifications and follows all rules in the rule set.
"incorrect" means that the generated web page either does not meet the user's specifications, or breaks one or more of the rules in the rule set.

Include a brief EXPLANATION to show how you determined if the generated JSON web page was "correct" or "incorrect"

Please provide your response in JSON format with two fields:
- "correctness": either "correct" or "incorrect" based on if the generated JSON web page is correct.
- "explanation": a brief explanation for why the JSON web page is correct or incorrect.